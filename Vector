In C++, a std::vector is a dynamic array-like container that provides a variety of operations for managing a collection of elements. Here are the common operations you can perform with a std::vector:

Initialization:

std::vector<T> myVector; - Creates an empty vector of type T.
std::vector<T> myVector(size, value); - Creates a vector of size size with each element initialized to value.
std::vector<T> myVector(begin, end); - Creates a vector with elements from the range specified by begin and end.

Insertion:

push_back(value); - Adds an element to the back of the vector.
insert(iterator, value); - Inserts an element at the specified position.
insert(iterator, n, value); - Inserts n copies of value at the specified position.
insert(iterator, begin, end); - Inserts elements from the range (begin, end) at the specified position.

Access:

front(); - Returns a reference to the first element.
back(); - Returns a reference to the last element.
at(index); - Returns a reference to the element at the specified index.
operator[]; - Allows direct access to elements using the [] operator.

Removal:

pop_back(); - Removes the last element.
erase(iterator); - Removes the element at the specified position.
erase(begin, end); - Removes elements in the range (begin, end).
clear(); - Removes all elements, leaving the vector empty.

Size and Capacity:

size(); - Returns the number of elements in the vector.
empty(); - Checks if the vector is empty.
resize(new_size); - Changes the size of the vector.
resize(new_size, value); - Changes the size and initializes new elements to value.
capacity(); - Returns the current storage capacity of the vector.

Iterators:

begin(); - Returns an iterator to the beginning.
end(); - Returns an iterator to the end.
rbegin(); - Returns a reverse iterator to the beginning.
rend(); - Returns a reverse iterator to the end.

Modifiers:

swap(otherVector); - Swaps the contents of two vectors.
assign(count, value); - Replaces the contents with count copies of value.
assign(begin, end); - Replaces the contents with elements from the range (begin, end).

Miscellaneous:

emplace(position, args...) - Constructs and inserts an element at the specified position.
emplace_back(args...) - Constructs and inserts an element at the back.
emplace_back(args...) - Constructs and inserts an element at the front.




// ! Memory

std::deque stores elements in chunks or blocks, which are not exposed to the user and are an implementation detail.

std::vector stores elements in a single, contiguous memory block (a dynamic array).



